# worker.py
#
# Copyright 2021 Martin Abente Lahaye
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import shutil
import pathlib
import pytest

ROOT_DIR = "@source_dir@"
sys.path.append(ROOT_DIR)

TEST_HOME_DIR = os.path.join(ROOT_DIR, "tests/root/home/tchx84")
TEST_COPY_DIR = os.path.join(TEST_HOME_DIR, "copy")
TEST_CUT_DIR = os.path.join(TEST_HOME_DIR, "cut")

TEST_TRASH_TMP_DIR = os.path.join(ROOT_DIR, "tests/root/home/Trashable")
TEST_XDG_DATA_DIRS = os.path.join(ROOT_DIR, "tests/root/home/share")


def update_gtk():
    from gi.repository import Gtk

    while Gtk.events_pending():
        Gtk.main_iteration()


def setup_module(module):
    import gi

    gi.require_version("Gdk", "3.0")
    gi.require_version("Gtk", "3.0")

    from gi.repository import Gtk

    Gtk.init(None)

    # XXX eventually port everything to pathlib?
    pathlib.Path(os.path.join(TEST_HOME_DIR, "folder")).mkdir(exist_ok=True)
    pathlib.Path(os.path.join(TEST_HOME_DIR, "folder", "file")).touch()
    pathlib.Path(os.path.join(TEST_HOME_DIR, "file")).touch()
    pathlib.Path(os.path.join(TEST_HOME_DIR, ".hidden")).touch()

    # for Trash test folder
    pathlib.Path(TEST_XDG_DATA_DIRS).mkdir(exist_ok=True)
    os.environ["PORTFOLIO_XDG_DATA_DIRS"] = TEST_XDG_DATA_DIRS

    # for Trash test files
    pathlib.Path(TEST_TRASH_TMP_DIR).mkdir(exist_ok=True)
    pathlib.Path(os.path.join(TEST_TRASH_TMP_DIR, "file")).touch()
    pathlib.Path(os.path.join(TEST_TRASH_TMP_DIR, "folder")).mkdir(exist_ok=True)
    pathlib.Path(os.path.join(TEST_TRASH_TMP_DIR, "folder", "file")).touch()


def teardown_module(module):
    pathlib.Path(os.path.join(TEST_HOME_DIR, "folder", "file")).touch()
    shutil.rmtree(TEST_COPY_DIR, ignore_errors=True)
    shutil.rmtree(TEST_CUT_DIR, ignore_errors=True)
    shutil.rmtree(TEST_TRASH_TMP_DIR, ignore_errors=True)
    shutil.rmtree(TEST_XDG_DATA_DIRS, ignore_errors=True)


def test_init_setup():
    assert len(os.listdir(TEST_HOME_DIR)) == 3

    assert os.path.exists(os.path.join(TEST_HOME_DIR, "folder", "file"))
    assert os.path.exists(os.path.join(TEST_HOME_DIR, "folder"))
    assert os.path.exists(os.path.join(TEST_HOME_DIR, "file"))
    assert os.path.exists(os.path.join(TEST_HOME_DIR, ".hidden"))


def test_load_worker_default():
    from src.worker import PortfolioLoadWorker

    paths = []

    def _callback(worker, directory, found, index, total):
        nonlocal paths
        paths += [path for name, path, icon in found]

    worker = PortfolioLoadWorker(TEST_HOME_DIR)
    worker.connect("updated", _callback)
    worker.start()

    update_gtk()

    assert len(paths) == 2

    assert set(paths) == set(
        [
            os.path.join(TEST_HOME_DIR, "folder"),
            os.path.join(TEST_HOME_DIR, "file"),
        ]
    )


def test_load_worker_hidden():
    from src.worker import PortfolioLoadWorker

    paths = []

    def _callback(worker, directory, found, index, total):
        nonlocal paths
        paths += [path for name, path, icon in found]

    worker = PortfolioLoadWorker(TEST_HOME_DIR, True)
    worker.connect("updated", _callback)
    worker.start()

    update_gtk()

    assert len(paths) == 3

    assert set(paths) == set(
        [
            os.path.join(TEST_HOME_DIR, "folder"),
            os.path.join(TEST_HOME_DIR, "file"),
            os.path.join(TEST_HOME_DIR, ".hidden"),
        ]
    )


def test_copy_worker_default():
    from src.worker import PortfolioCopyWorker

    source = TEST_HOME_DIR
    target = TEST_COPY_DIR

    assert not os.path.exists(target)
    os.makedirs(target)

    selection = [
        (os.path.join(source, "folder"), None),
        (os.path.join(source, "file"), None),
    ]

    worker = PortfolioCopyWorker(selection, target)
    worker.start()
    worker.join()

    assert len(os.listdir(source)) == 4
    assert len(os.listdir(target)) == 2

    assert os.path.exists(os.path.join(target, "folder", "file"))
    assert os.path.exists(os.path.join(target, "folder"))
    assert os.path.exists(os.path.join(target, "file"))


def test_copy_worker_nonidempotent():
    from src.worker import PortfolioCopyWorker

    source = TEST_COPY_DIR
    target = TEST_COPY_DIR

    selection = [
        (os.path.join(source, "folder"), None),
        (os.path.join(source, "file"), None),
    ]

    worker = PortfolioCopyWorker(selection, target)
    worker.start()
    worker.join()

    assert len(os.listdir(source)) == 4
    assert len(os.listdir(target)) == 4

    assert os.path.exists(os.path.join(target, "folder", "file"))
    assert os.path.exists(os.path.join(target, "folder"))
    assert os.path.exists(os.path.join(target, "file"))

    assert os.path.exists(os.path.join(target, "folder(1)", "file"))
    assert os.path.exists(os.path.join(target, "folder(1)"))
    assert os.path.exists(os.path.join(target, "file(1)"))


def test_copy_worker_overwrite():
    from src.worker import PortfolioCopyWorker

    source = TEST_COPY_DIR
    target = TEST_HOME_DIR

    # to differenciate from the source content
    pathlib.Path(os.path.join(target, "folder", "different")).touch()
    assert os.path.exists(os.path.join(target, "folder", "different"))

    selection = [
        (os.path.join(source, "folder"), None),
        (os.path.join(source, "file"), None),
    ]

    worker = PortfolioCopyWorker(selection, target)
    worker.start()
    worker.join()

    assert len(os.listdir(source)) == 4
    assert len(os.listdir(target)) == 4

    assert os.path.exists(os.path.join(source, "folder", "file"))
    assert os.path.exists(os.path.join(source, "folder"))
    assert os.path.exists(os.path.join(source, "file"))

    assert not os.path.exists(os.path.join(target, "folder", "different"))
    assert os.path.exists(os.path.join(target, "folder", "file"))
    assert os.path.exists(os.path.join(target, "folder"))
    assert os.path.exists(os.path.join(target, "file"))


@pytest.mark.timeout(5)
def test_delete_worker_default():
    from src.worker import PortfolioDeleteWorker

    source = TEST_COPY_DIR

    selection = [
        (os.path.join(source, "folder(1)"), None),
        (os.path.join(source, "file(1)"), None),
    ]

    finished = False

    def _callback(worker, total):
        nonlocal finished
        finished = True

    worker = PortfolioDeleteWorker(selection)
    worker.connect("finished", _callback)
    worker.start()

    while not finished:
        update_gtk()

    assert len(os.listdir(source)) == 2

    assert os.path.exists(os.path.join(source, "folder", "file"))
    assert os.path.exists(os.path.join(source, "folder"))
    assert os.path.exists(os.path.join(source, "file"))


def test_cut_worker_default():
    from src.worker import PortfolioCutWorker

    source = TEST_COPY_DIR
    target = TEST_CUT_DIR

    assert not os.path.exists(target)
    os.makedirs(target)

    selection = [
        (os.path.join(source, "folder"), None),
        (os.path.join(source, "file"), None),
    ]

    worker = PortfolioCutWorker(selection, target)
    worker.start()
    worker.join()

    assert len(os.listdir(source)) == 0
    assert len(os.listdir(target)) == 2

    assert os.path.exists(os.path.join(target, "folder", "file"))
    assert os.path.exists(os.path.join(target, "folder"))
    assert os.path.exists(os.path.join(target, "file"))


def test_cut_worker_idempotent():
    from src.worker import PortfolioCutWorker

    source = TEST_CUT_DIR
    target = TEST_CUT_DIR

    selection = [
        (os.path.join(source, "folder"), None),
        (os.path.join(source, "file"), None),
    ]

    worker = PortfolioCutWorker(selection, target)
    worker.start()
    worker.join()

    assert len(os.listdir(source)) == 2
    assert len(os.listdir(target)) == 2

    assert os.path.exists(os.path.join(target, "folder", "file"))
    assert os.path.exists(os.path.join(target, "folder"))
    assert os.path.exists(os.path.join(target, "file"))


def test_cut_worker_overwrite():
    from src.worker import PortfolioCutWorker

    source = TEST_CUT_DIR
    target = TEST_HOME_DIR

    # to differenciate from the source content
    pathlib.Path(os.path.join(target, "folder", "different")).touch()
    assert os.path.exists(os.path.join(target, "folder", "different"))

    selection = [
        (os.path.join(source, "folder"), None),
        (os.path.join(source, "file"), None),
    ]

    worker = PortfolioCutWorker(selection, target)
    worker.start()
    worker.join()

    assert len(os.listdir(source)) == 0
    assert len(os.listdir(target)) == 5

    assert os.path.exists(os.path.join(target, "folder"))
    assert not os.path.exists(os.path.join(target, "folder", "different"))
    assert os.path.exists(os.path.join(target, "file"))
    assert os.path.exists(os.path.join(target, ".hidden"))
    assert os.path.exists(os.path.join(target, "copy"))
    assert os.path.exists(os.path.join(target, "cut"))


@pytest.mark.timeout(5)
@pytest.mark.skip(reason="no editor available")
def test_open_worker_default():
    from src.worker import PortfolioOpenWorker

    path_to_file = os.path.join(TEST_HOME_DIR, "file")
    finished = False

    def _callback(worker):
        nonlocal finished
        finished = True

    worker = PortfolioOpenWorker(path_to_file)
    worker.connect("finished", _callback)
    worker.start()

    while not finished:
        update_gtk()

    assert finished is True


@pytest.mark.timeout(5)
def test_open_worker_error():
    from src.worker import PortfolioOpenWorker

    path_to_nowhere = "/path/to/no/where"
    path = None
    finished = False

    def _callback(worker, _path):
        nonlocal path, finished
        path = _path
        finished = True

    worker = PortfolioOpenWorker(path_to_nowhere)
    worker.connect("failed", _callback)
    worker.start()

    while not finished:
        update_gtk()

    assert path == path_to_nowhere


@pytest.mark.timeout(5)
def test_copy_worker_stopped():
    from src.worker import PortfolioCopyWorker

    source = TEST_HOME_DIR
    target = TEST_COPY_DIR

    assert len(os.listdir(source)) == 5
    assert len(os.listdir(target)) == 0

    selection = [
        (os.path.join(source, "folder"), None),
        (os.path.join(source, "file"), None),
    ]

    stopped = False

    def _callback(worker):
        nonlocal stopped
        stopped = True

    worker = PortfolioCopyWorker(selection, target)
    worker.connect("stopped", _callback)
    worker.stop()
    worker.start()
    worker.join()

    while not stopped:
        update_gtk()

    assert stopped is True
    assert len(os.listdir(source)) == 5
    assert len(os.listdir(target)) == 0


@pytest.mark.timeout(5)
def test_cut_worker_stopped():
    from src.worker import PortfolioCutWorker

    source = TEST_HOME_DIR
    target = TEST_COPY_DIR

    assert len(os.listdir(source)) == 5
    assert len(os.listdir(target)) == 0

    selection = [
        (os.path.join(source, "folder"), None),
        (os.path.join(source, "file"), None),
    ]

    stopped = False

    def _callback(worker):
        nonlocal stopped
        stopped = True

    worker = PortfolioCutWorker(selection, target)
    worker.connect("stopped", _callback)
    worker.stop()
    worker.start()
    worker.join()

    while not stopped:
        update_gtk()

    assert stopped is True
    assert len(os.listdir(source)) == 5
    assert len(os.listdir(target)) == 0


@pytest.mark.timeout(5)
def test_delete_worker_stopped():
    from src.worker import PortfolioDeleteWorker

    source = TEST_HOME_DIR

    assert len(os.listdir(source)) == 5

    selection = [
        (os.path.join(source, "copy"), None),
        (os.path.join(source, "cut"), None),
    ]

    stopped = False

    def _callback(worker):
        nonlocal stopped
        stopped = True

    worker = PortfolioDeleteWorker(selection)
    worker.connect("stopped", _callback)
    worker.start()
    worker.stop()

    while not stopped:
        update_gtk()

    assert stopped is True
    assert len(os.listdir(source)) == 5


def test_properties_worker_default():
    from src.worker import PortfolioPropertiesWorker

    worker = PortfolioPropertiesWorker()
    worker.props.path = os.path.join(TEST_HOME_DIR, "file")

    assert worker.props.name == "file"
    assert worker.props.size == "8.0 B"


@pytest.mark.timeout(5)
def test_send_trash_worker_default():
    from src.worker import PortfolioSendTrashWorker

    assert len(os.listdir(TEST_TRASH_TMP_DIR)) == 2

    selection = [
        (os.path.join(TEST_TRASH_TMP_DIR, "file"), None),
        (os.path.join(TEST_TRASH_TMP_DIR, "folder"), None),
    ]

    finished = False

    def _callback(worker, total):
        nonlocal finished
        finished = True

    worker = PortfolioSendTrashWorker(selection)
    worker.connect("finished", _callback)
    worker.start()

    while not finished:
        update_gtk()

    assert len(os.listdir(TEST_TRASH_TMP_DIR)) == 0
    assert os.path.exists(os.path.join(TEST_XDG_DATA_DIRS, "Trash", "files", "file"))
    assert os.path.exists(os.path.join(TEST_XDG_DATA_DIRS, "Trash", "files", "folder"))


@pytest.mark.timeout(5)
def test_load_trash_worker_default():
    from src.worker import PortfolioLoadTrashWorker

    paths = []

    def _update_callback(worker, name, tuples, index, total):
        nonlocal paths
        paths += [path for name, path in tuples]

    finished = False

    def _finished_callback(worker, path):
        nonlocal finished
        finished = True

    worker = PortfolioLoadTrashWorker()
    worker.connect("updated", _update_callback)
    worker.connect("finished", _finished_callback)
    worker.start()

    while not finished:
        update_gtk()

    assert len(paths) == 2
    assert set(paths) == set(
        [
            os.path.join(TEST_XDG_DATA_DIRS, "Trash", "files", "file"),
            os.path.join(TEST_XDG_DATA_DIRS, "Trash", "files", "folder"),
        ]
    )


@pytest.mark.timeout(5)
def test_restore_trash_worker_default():
    from src.worker import PortfolioRestoreTrashWorker

    assert len(os.listdir(TEST_TRASH_TMP_DIR)) == 0

    selection = [
        (os.path.join(TEST_XDG_DATA_DIRS, "Trash", "files", "file"), None),
        (os.path.join(TEST_XDG_DATA_DIRS, "Trash", "files", "folder"), None),
    ]

    finished = False

    def _callback(worker, total):
        nonlocal finished
        finished = True

    worker = PortfolioRestoreTrashWorker(selection)
    worker.connect("finished", _callback)
    worker.start()

    while not finished:
        update_gtk()

    assert len(os.listdir(TEST_TRASH_TMP_DIR)) == 2
    assert os.path.exists(os.path.join(TEST_TRASH_TMP_DIR, "file"))
    assert os.path.exists(os.path.join(TEST_TRASH_TMP_DIR, "folder"))


@pytest.mark.timeout(5)
def test_delete_trash_worker_default():
    from src.worker import PortfolioDeleteTrashWorker

    test_send_trash_worker_default()

    selection = [
        (os.path.join(TEST_XDG_DATA_DIRS, "Trash", "files", "file"), None),
        (os.path.join(TEST_XDG_DATA_DIRS, "Trash", "files", "folder"), None),
    ]

    finished = False

    def _callback(worker, total):
        nonlocal finished
        finished = True

    worker = PortfolioDeleteTrashWorker(selection)
    worker.connect("finished", _callback)
    worker.start()

    while not finished:
        update_gtk()

    assert len(os.listdir(TEST_TRASH_TMP_DIR)) == 0
    assert len(os.listdir(os.path.join(TEST_XDG_DATA_DIRS, "Trash", "files"))) == 0
